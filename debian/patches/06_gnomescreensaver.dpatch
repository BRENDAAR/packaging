#! /bin/sh /usr/share/dpatch/dpatch-run
## 04_gnome_screensaver.dpatch by  <superm1@ubuntu.com>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Replaces XScreensaver Support with Gnome Screensaver Support

@DPATCH@
diff -urNad mythtv-0.20.2~/libs/libmyth/screensaver-x11.cpp mythtv-0.20.2/libs/libmyth/screensaver-x11.cpp
--- mythtv-0.20.2~/libs/libmyth/screensaver-x11.cpp	2006-05-31 19:36:05.000000000 -0400
+++ mythtv-0.20.2/libs/libmyth/screensaver-x11.cpp	2007-10-29 17:17:54.000000000 -0400
@@ -11,142 +11,203 @@
 #include "mythcontext.h"
 #include "util.h"
 
-class ScreenSaverX11Private 
+class ScreenSaverX11Private
 {
-    struct 
+    friend class ScreenSaverX11;
+
+  public:
+    ScreenSaverX11Private(ScreenSaverX11 *outer) : m_dpmsenabled(FALSE),
+        m_dpmsdeactivated(false), m_timeoutInterval(-1), m_resetTimer(0)
     {
-        bool saved;
-        int timeout;
-        int interval;
-        int preferblank;
-        int allowexposure;
-        bool xscreensaverRunning;
-        BOOL dpmsaware;
-        BOOL dpmsenabled;
-        bool dpmsdeactivated;
-    } state;
+        m_xscreensaverRunning =
+                myth_system("xscreensaver-command -version >&- 2>&-") == 0;
+        m_gscreensaverRunning =
+                myth_system("gnome-screensaver-command --help >&- 2>&-") == 0;
 
-    QTimer *resetTimer;
-    int timeoutInterval;
+        if (IsScreenSaverRunning())
+        {
+            m_resetTimer = new QTimer(outer);
+            QObject::connect(m_resetTimer, SIGNAL(timeout()),
+                             outer, SLOT(resetSlot()));
+            VERBOSE(VB_GENERAL, "XScreenSaver support enabled");
+        }
 
-    friend class ScreenSaverX11;
+        int dummy;
+        if ((m_dpmsaware = DPMSQueryExtension(qt_xdisplay(), &dummy, &dummy)))
+        {
+            CARD16 power_level;
 
-};
+            /* If someone runs into X server weirdness that goes away when
+            * they externally disable DPMS, then the 'dpmsenabled' test should
+            * be short circuited by a call to 'DPMSCapable()'. Be sure to
+            * manually initialize dpmsenabled to false.
+            */
 
-ScreenSaverX11::ScreenSaverX11() 
-{
-    d = new ScreenSaverX11Private();
-    d->state.xscreensaverRunning = 
-                  (myth_system("xscreensaver-command -version >&- 2>&-") == 0); 
-    if (d->state.xscreensaverRunning)
-    {
-        d->resetTimer = new QTimer(this);
-        connect(d->resetTimer, SIGNAL(timeout()), this, SLOT(resetSlot()));
+            DPMSInfo(qt_xdisplay(), &power_level, &m_dpmsenabled);
 
-        d->timeoutInterval = -1;
-        VERBOSE(VB_GENERAL, "XScreenSaver support enabled");
+            if (m_dpmsenabled)
+                VERBOSE(VB_GENERAL, "DPMS is active.");
+            else
+                VERBOSE(VB_GENERAL, "DPMS is disabled.");
+        }
+        else
+        {
+            VERBOSE(VB_GENERAL, "DPMS is not supported.");
+        }
     }
 
-    int dummy;
-    if ((d->state.dpmsaware = DPMSQueryExtension(qt_xdisplay(),&dummy,&dummy)))
+    ~ScreenSaverX11Private()
     {
-        CARD16 power_level;
+        delete m_resetTimer;
+    }
 
-	    /* If someone runs into X server weirdness that goes away when
-	    * they externally disable DPMS, then the 'dpmsenabled' test should
-	    * be short circuited by a call to 'DPMSCapable()'. Be sure to
-	    * manually initialize dpmsenabled to false.
-	    */
+    bool IsScreenSaverRunning()
+    {
+        return m_xscreensaverRunning || m_gscreensaverRunning;
+    }
 
-        DPMSInfo(qt_xdisplay(), &power_level, &(d->state.dpmsenabled));
+    bool IsDPMSEnabled() { return m_dpmsenabled; }
 
-        if (d->state.dpmsenabled)
-            VERBOSE(VB_GENERAL, "DPMS is active.");
-        else
-            VERBOSE(VB_GENERAL, "DPMS is disabled.");
+    void StopTimer() { if (m_resetTimer) m_resetTimer->stop(); }
 
-    } else {
-        d->state.dpmsenabled = false;
-        VERBOSE(VB_GENERAL, "DPMS is not supported.");
+    void StartTimer()
+    {
+        if (m_resetTimer)
+            m_resetTimer->start(m_timeoutInterval, FALSE);
     }
 
-    d->state.dpmsdeactivated = false;
+    void ResetTimer()
+    {
+        StopTimer();
 
-}
+        if (m_timeoutInterval == -1)
+        {
+            m_timeoutInterval = gContext->GetNumSettingOnHost(
+                "xscreensaverInterval", gContext->GetHostName(), 60) * 1000;
+        }
 
-ScreenSaverX11::~ScreenSaverX11() 
-{
-    /* Ensure DPMS gets left as it was found. */
-    if (d->state.dpmsdeactivated)
-        Restore();
+        if (m_timeoutInterval > 0)
+            StartTimer();
+    }
 
-    delete d;
-}
+    // DPMS
+    bool DeactivatedDPMS() { return m_dpmsdeactivated; }
 
-void ScreenSaverX11::Disable(void) 
-{
-    if (!d->state.saved)
+    void DisableDPMS()
     {
-        XGetScreenSaver(qt_xdisplay(),
-                        &d->state.timeout, &d->state.interval,
-                        &d->state.preferblank, 
-                        &d->state.allowexposure);
-        d->state.saved = true;
+        if (IsDPMSEnabled())
+        {
+            m_dpmsdeactivated = true;
+            DPMSDisable(qt_xdisplay());
+            VERBOSE(VB_GENERAL, "DPMS Deactivated ");
+        }
     }
 
-    XResetScreenSaver(qt_xdisplay());
-    XSetScreenSaver(qt_xdisplay(), 0, 0, 0, 0);
-
-    if (d->state.dpmsenabled)
+    void RestoreDPMS()
     {
-        d->state.dpmsdeactivated = true;
-        DPMSDisable(qt_xdisplay());
-        VERBOSE(VB_GENERAL, "DPMS Deactivated ");
+        if (m_dpmsdeactivated)
+        {
+            m_dpmsdeactivated = false;
+            DPMSEnable(qt_xdisplay());
+            VERBOSE(VB_GENERAL, "DPMS Reactivated.");
+        }
     }
 
-    if (d->state.xscreensaverRunning)
+    void SaveScreenSaver()
     {
-        if (d->resetTimer)
-            d->resetTimer->stop();
-
-        if (d->timeoutInterval == -1)
+        if (!m_state.saved)
         {
-            d->timeoutInterval = 
-                gContext->GetNumSettingOnHost("xscreensaverInterval",
-                                          gContext->GetHostName(),
-                                          60) * 1000;
+            XGetScreenSaver(qt_xdisplay(), &m_state.timeout, &m_state.interval,
+                            &m_state.preferblank, &m_state.allowexposure);
+            m_state.saved = true;
         }
-        if (d->timeoutInterval > 0)
+    }
+
+    void RestoreScreenSaver()
+    {
+        if (m_state.saved)
         {
-            d->resetTimer->start(d->timeoutInterval, FALSE);
+            XSetScreenSaver(qt_xdisplay(), m_state.timeout, m_state.interval,
+                            m_state.preferblank, m_state.allowexposure);
+            m_state.saved = false;
         }
     }
+
+    void ResetScreenSaver()
+    {
+        if (m_xscreensaverRunning)
+            myth_system("xscreensaver-command -deactivate >&- 2>&- &");
+        else
+            myth_system("gnome-screensaver-command --poke >&- 2>&- &");
+    }
+
+  private:
+    struct ScreenSaverState
+    {
+        ScreenSaverState() : saved(false) {}
+        bool saved;
+        int timeout;
+        int interval;
+        int preferblank;
+        int allowexposure;
+    };
+
+  private:
+    bool m_dpmsaware;
+    bool m_xscreensaverRunning;
+    bool m_gscreensaverRunning;
+    BOOL m_dpmsenabled;
+    bool m_dpmsdeactivated; // true if we disabled DPMS
+
+    int m_timeoutInterval;
+    QTimer *m_resetTimer;
+
+    ScreenSaverState m_state;
+};
+
+ScreenSaverX11::ScreenSaverX11()
+{
+    d = new ScreenSaverX11Private(this);
 }
 
-void ScreenSaverX11::Restore(void) 
+ScreenSaverX11::~ScreenSaverX11()
 {
+    /* Ensure DPMS gets left as it was found. */
+    if (d->DeactivatedDPMS())
+        Restore();
+
+    delete d;
+}
+
+void ScreenSaverX11::Disable(void)
+{
+    d->SaveScreenSaver();
     XResetScreenSaver(qt_xdisplay());
-    XSetScreenSaver(qt_xdisplay(),
-                    d->state.timeout, d->state.interval,
-                    d->state.preferblank, 
-                    d->state.allowexposure);
-    d->state.saved = false;
 
-    if (d->state.dpmsdeactivated)
-    {
-        d->state.dpmsdeactivated = false;
-        DPMSEnable(qt_xdisplay());
-        VERBOSE(VB_GENERAL, "DPMS Reactivated.");
-    }
+    XSetScreenSaver(qt_xdisplay(), 0, 0, 0, 0);
 
-    if (d->state.xscreensaverRunning && d->resetTimer)
-        d->resetTimer->stop();
+    d->DisableDPMS();
+
+    if (d->IsScreenSaverRunning())
+        d->ResetTimer();
 }
 
-void ScreenSaverX11::Reset(void) 
+void ScreenSaverX11::Restore(void)
 {
+    d->RestoreScreenSaver();
+    d->RestoreDPMS();
+
+    // One must reset after the restore
     XResetScreenSaver(qt_xdisplay());
-    if (d->state.xscreensaverRunning)
+
+    if (d->IsScreenSaverRunning())
+        d->StopTimer();
+}
+
+void ScreenSaverX11::Reset(void)
+{
+    XResetScreenSaver(qt_xdisplay());
+    if (d->IsScreenSaverRunning())
         resetSlot();
 
     if (Asleep())
@@ -160,11 +221,11 @@
 
 bool ScreenSaverX11::Asleep(void)
 {
-    if (!d->state.dpmsenabled)
-        return 0;
+    if (!d->IsDPMSEnabled())
+        return false;
 
-    if (d->state.dpmsdeactivated)
-        return 0;
+    if (d->DeactivatedDPMS())
+        return false;
 
     BOOL on;
     CARD16 power_level;
@@ -174,7 +235,7 @@
     return (power_level != DPMSModeOn);
 }
 
-void ScreenSaverX11::resetSlot() 
+void ScreenSaverX11::resetSlot()
 {
-    myth_system(QString("xscreensaver-command -deactivate >&- 2>&- &")); 
+    d->ResetScreenSaver();
 }
